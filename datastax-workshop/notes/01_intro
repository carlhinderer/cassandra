-----------------------------------------------------------------------------
| CHAPTER 1 - INTRODUCTION                                                  |
-----------------------------------------------------------------------------

- DataStax Course

    - Notes here from DS 201 playlist:

        https://www.youtube.com/
        watch?v=69pvhO6mK_o&list=PL2g2h-wyI4Spf5rzSmesewHpXYVnyQ2TS&ab_channel=DataStaxDevelopers


    - Repo for Workshop:

        https://github.com/datastaxdevs/workshop-intro-to-cassandra



- Cassandra Primary Keys

    - To define a PK:

        PRIMARY KEY ((partitioning), cluster)


    - The partitioning columns determine where data is stored.
      The clustering columns determine how data is sorted.


    - Once you've created a table, you can't change the PK with an ALTER TABLE.  You'll need to recreate
        the table to change the key.


    - This key isn't unique enough, so records will be overwritten with upserts:

        PRIMARY KEY ((state), city, name)

      We'll use this instead to provide enough uniqueness to identify a single row:

        PRIMARY KEY ((state), city, name, id)


    - The PK actually solves 3 problems in Cassandra:

        1. How to partition data
        2. How to sort data in partitions
        3. Uniqueness


    - We need to put columns in the correct order (the way they were defined in the primary key) in
        queries.


    - Sometimes, we may want clustering columns to store data in DESC order rather that ASC.  Time series
        data is a common use for this.

        PRIMARY KEY ((state), city, name, id)
        WITH CLUSTERING ORDER BY (city DESC, name ASC)


    - Tables are named with the partition key by convention.

        users_by_city
        posts_by_user
        posts_by_room


    - We usually want one table per query.



- Immediate Consistency

    - We get immediate consistency (read is always last write) if 

        CL(read) + CL(write) > RF


    - Example

        RF = 3
        CL(write) = ALL (3)
        CL(read)  = 1

        4 > 3


    - Example

        RF = 3
        CL(write) = QUORUM (2)
        CL(read)  = QUORUM (2)

        4 > 3



- Nodes and VNodes

    - We want to use an attached hard drive, not a SAN for our nodes.  If the disk is connected via
        an ethernet cable, it's the wrong solution.


    - Statues for Node = [Joining, Leaving, Up, Down]


    - The 'bin/nodetool' is used to manage individual nodes.


    - One node maps to multiple vnodes.  This makes moving data less painful when nodes are added and
        removed.



- Gossip and Snitches

    - The Gossip protocol is used to share cluster metadata.  Each node picks 1-3 nodes every second
        to gossip with.


    - Snitches are used to determine and declare each node's rack and data center.  There are 4 types:

        1. SimpleSnitch = Put all nodes in the same data center and rack

        2. PropertyFileSnitch = Read datacenter and rack information for all nodes from a file
                                  (cassandra-topology.properties), it is a pain to maintain this file
                                  on all nodes

        3. GossipingPropertyFileSnitch = Just maintain each individual node's configuration, and let
                                           gossip spread the information

        4. RackInferringSnitch = Try to guess data center and rack from IP address (not recommended)



- Replication

    - Murmum3 and MD5 are consistent hashing algorithms used for partitioning.


    - To use multi-datacenter replication:

        CREATE KEYSPACE killrvideo
        WITH REPLICATION = {
            'class': 'NetworkTopologyStrategy',
            'dc-west': 2,
            'dc-east': 3
        }



